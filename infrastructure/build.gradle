buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.flywaydb:flyway-mysql:10.15.0'
    }
}

plugins {
    id 'java-conventions'
    id 'jacoco-report-aggregation'
    id 'application'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.flywaydb.flyway' version '10.15.0'
}

group = 'br.landucci.admin.catologo.infrastructure'

bootJar {
    archiveFileName = "application.jar"
    destinationDirectory.set(file("${rootProject.buildDir}/libs"))
}

dependencies {
    implementation(project(":domain"))
    implementation(project(":application"))

    implementation('com.google.guava:guava:33.2.1-jre')
    implementation('com.mysql:mysql-connector-j:8.4.0')
    implementation('com.h2database:h2')
    implementation('org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0')
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude module: 'spring-boot-starter-tomcat'
    }
    implementation('org.springframework.boot:spring-boot-starter-undertow')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-amqp')
    implementation('com.fasterxml.jackson.module:jackson-module-afterburner')

    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-oauth2-resource-server:')
    implementation('com.nimbusds:nimbus-jose-jwt:9.0.1')

    testImplementation('org.flywaydb:flyway-core')
    testImplementation('org.springframework.amqp:spring-rabbit-test:3.1.4')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.testcontainers:testcontainers:1.19.4')
    testImplementation('org.testcontainers:mysql:1.19.4')
    testImplementation('org.testcontainers:junit-jupiter:1.19.4')

    testImplementation('org.springframework.security:spring-security-test')
}

flyway {
    url = System.getenv('FLYWAY_DB') ?: 'jdbc:mysql://localhost:3306/adm_videos_dev'
    user = System.getenv('FLYWAY_USER') ?: 'codeflix'
    password = System.getenv('FLYWAY_PASS') ?: 'C0d3Fl1x'
}

testCodeCoverageReport {
    reports {
        xml {
            enabled true
            destination file("$rootDir/build/reports/jacoco/test/jacocoTestReport.xml")
        }

        html {
            enabled true
            destination file("$rootDir/build/reports/jacoco/test/")
        }
    }
}

tasks.named("jacocoTestReport") {
    dependsOn tasks.named("testCodeCoverageReport", JacocoReport)
}